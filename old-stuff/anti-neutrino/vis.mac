# Macro file for the initialization phase of "exampleN03.cc"
# when running in interactive mode
#
# Sets some default verbose
#
/control/verbose 2
/control/saveHistory
/run/verbose 2
#
# Use this open statement to create an OpenGL view:
#/vis/open OGL 600x600-0+0
#
/vis/open OI
# Use this open statement to create a .prim file suitable for
# viewing in DAWN:
#/vis/open DAWNFILE
#
# Use this open statement to create a .heprep file suitable for
# viewing in HepRApp:
#/vis/open HepRepFile
#
# Use this open statement to create a .wrl file suitable for
# viewing in a VRML viewer:
#/vis/open VRML2FILE
#
# Disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh false
/vis/viewer/set/background 1.0 1.0 1.0
/vis/verbose errors
/vis/viewer/set/viewpointThetaPhi 160 45 deg
/vis/viewer/set/style wireframe#surface
/vis/viewer/set/culling density true 0.1
/vis/viewer/set/edge true
/vis/viewer/set/auxiliaryEdge false
/vis/viewer/set/lightsMove cam
/vis/viewer/set/hiddenMarker false
#
# Draw geometry:
/vis/drawVolume
#
# Specify view angle:
#/vis/viewer/set/viewpointThetaPhi 135. 0.
#
# Specify zoom value:
#/vis/viewer/zoom 2.
#
# Specify style (surface or wireframe):
/vis/viewer/set/style wireframe
#
/vis/geometry/set/visibility world_logical 0 0 0
/vis/geometry/set/visibility shell_logical 0 0 0
/vis/geometry/set/colour eltrd1_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd2_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd3_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd4_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd5_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd6_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd7_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd8_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour eltrd9_logical 0 0.0 0.0 1.0 0.6
/vis/geometry/set/colour cal_logical 0 1.0 0.0 0.0 0.8
# Draw coordinate axes:
#/vis/scene/add/axes 0 0 0 1 m
#
# Draw smooth trajectories at end of event, showing trajectory points
# as markers 2 pixels wide:
/vis/scene/add/trajectories smooth
/vis/modeling/trajectories/create/drawByCharge
/vis/modeling/trajectories/drawByCharge-0/default/setDrawStepPts false
/vis/modeling/trajectories/drawByCharge-0/default/setStepPtsSize 1
# (if too many tracks cause core dump => /tracking/storeTrajectory 0)
#
# Draw hits at end of event:
/vis/scene/add/hits
#
# To draw only gammas:
#/vis/filtering/trajectories/create/particleFilter
#/vis/filtering/trajectories/particleFilter-0/add gamma
#
# To invert the above, drawing all particles except gammas,
# keep the above two lines but also add:
#/vis/filtering/trajectories/particleFilter-0/invert true
#
# Many other options are available with /vis/modeling and /vis/filtering.
# For example, to select colour by particle ID:
#/vis/modeling/trajectories/create/drawByParticleID
#/vis/modeling/trajectories/drawByParticleID-0/set e- blue
#
# To superimpose all of the events from a given run:
/vis/scene/endOfEventAction accumulate
#
# Re-establish auto refreshing and verbosity:
/vis/viewer/set/autoRefresh true
/vis/verbose warnings
#
# For file-based drivers, use this to create an empty detector view:
#/vis/viewer/flush
#/testpt/stepMax 10 mm
#/vis/viewer/flush
#/run/beamOn 2
#/testpt/stepMax 2 um
#/run/beamOn 1
exit
