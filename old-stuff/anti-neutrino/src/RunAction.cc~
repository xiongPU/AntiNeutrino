#include "RunAction.hh"

RunAction::RunAction(DetectorConstruction* det, PrimaryGeneratorAction* kin)
:fDetector(det), fPrimary(kin)
{ 
	analysisManager = G4AnalysisManager::Instance();
	analysisManager->SetVerboseLevel(1); 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

RunAction::~RunAction()
{ 
	delete analysisManager;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void RunAction::BeginOfRunAction(const G4Run* run)
{
	G4cout << "### Run " << run->GetRunID() << " start." << G4endl;

	G4String ext = analysisManager->GetFileType();
	G4String filename = "PTOLEMY-TESHit."+ext;

	G4bool fileOpen = analysisManager->OpenFile(filename);
	if (!fileOpen){
		G4cout<< "\n---> HistoManager::book(): cannot open " << filename
        	   << G4endl;
		return;
	}

	analysisManager->CreateNtuple( "PTOLEMY", "Transition_Edge_Sensor");
	analysisManager->CreateNtupleIColumn("electron_hits");
	analysisManager->CreateNtupleDColumn("t");
	analysisManager->CreateNtupleDColumn("x");
	analysisManager->CreateNtupleDColumn("y");
	analysisManager->CreateNtupleDColumn("z");
	analysisManager->CreateNtupleDColumn("dr");
	analysisManager->CreateNtupleDColumn("px");
	analysisManager->CreateNtupleDColumn("py");
	analysisManager->CreateNtupleDColumn("pz");
	analysisManager->CreateNtupleDColumn("dp");
	analysisManager->CreateNtupleDColumn("E");
	analysisManager->CreateNtupleDColumn("dE");
	
	G4RunManager::GetRunManager()->SetRandomNumberStore(false);
	CLHEP::HepRandom::showEngineStatus();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void RunAction::EndOfRunAction(const G4Run* aRun)
{
	G4int nbEvents = aRun->GetNumberOfEvent();
	if (nbEvents == 0) return;
   
	G4ParticleDefinition* particle = fPrimary->GetParticleGun()
                                          ->GetParticleDefinition();
 	G4String partName = particle->GetParticleName();
	G4double ePrimary = fPrimary->GetParticleGun()->GetParticleEnergy();
  
	G4cout << "\n ======================== run summary ======================\n";  
	G4cout << "\n The run was " << nbEvents << " " << partName << " of "
        	 << G4BestUnit(ePrimary,"Energy");// << " through " 

	G4cout << "\n ===========================================================\n";
	G4cout << G4endl;

	analysisManager = G4AnalysisManager::Instance();
	analysisManager->Write();
	analysisManager->CloseFile();
 
	CLHEP::HepRandom::showEngineStatus();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
/*
G4double RunAction::GetEnergyFromRestrictedRange(G4double range,
            G4ParticleDefinition* particle, G4Material* material, G4double Etry)
{
	G4EmCalculator emCal;
    
	G4double Energy = Etry, dE = 0., dEdx;
	G4double r, dr;
	G4double err  = 1., errmax = 0.00001;
	G4int    iter = 0 , itermax = 10;  

	while (err > errmax && iter < itermax) {
		iter++;
		Energy -= dE;
		r = emCal.GetRangeFromRestricteDEDX(Energy,particle,material);
		dr = r - range;          
		dEdx = emCal.GetDEDX(Energy,particle,material);
		dE = dEdx*dr;
		err = std::abs(dE)/Energy;    
	}

	if (iter == itermax) {
		G4cout<< "\n  ---> warning: RunAction::GetEnergyFromRestRange() did not converge"
			<< "   Etry = " << G4BestUnit(Etry,"Energy")
			<< "   Energy = " << G4BestUnit(Energy,"Energy")
			<< "   err = " << err
			<< "   iter = " << iter << G4endl;
	}
         
	return Energy;         
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4double RunAction::GetEnergyFromCSDARange(G4double range,G4ParticleDefinition* particle, G4Material* material, G4double Etry)
{
	G4EmCalculator emCal;
    
	G4double Energy = Etry, dE = 0., dEdx;
	G4double r, dr;
	G4double err  = 1., errmax = 0.00001;
	G4int    iter = 0 , itermax = 10;  

	while (err > errmax && iter < itermax) {
		iter++;
		Energy -= dE;
		r = emCal.GetCSDARange(Energy,particle,material);
		dr = r - range;          
		dEdx = emCal.ComputeTotalDEDX(Energy,particle,material);
		dE = dEdx*dr;
		err = std::abs(dE)/Energy;
	}

	if (iter == itermax) {
		G4cout<< "\n  ---> warning: RunAction::GetEnergyFromCSDARange() did not converge"
			<< "   Etry = " << G4BestUnit(Etry,"Energy")
			<< "   Energy = " << G4BestUnit(Energy,"Energy")
			<< "   err = " << err
			<< "   iter = " << iter << G4endl;
	}
         
	return Energy;         
}
*/
